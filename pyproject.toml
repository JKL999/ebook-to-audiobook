[tool.poetry]
name = "ebook2audio"
version = "1.0.0-dev"
description = "Convert ebooks to audiobooks with AI-powered voice cloning"
authors = ["ebook2audio developers"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/yourusername/ebook2audio"
repository = "https://github.com/yourusername/ebook2audio"
keywords = ["ebook", "audiobook", "tts", "voice-cloning", "pdf", "epub", "mobi"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: Text Processing :: Linguistic"
]
packages = [{include = "ebook2audio", from = "src"}]

[tool.poetry.dependencies]
python = "^3.10"
# PDF Processing (10x faster than PyPDF2)
pymupdf = "^1.24.0"
# EPUB Support
ebooklib = "^0.18"
# OCR for scanned PDFs
ocrmypdf = "^16.0.0"
# Audio processing
pydub = "^0.25.1"
# CLI Framework
typer = {extras = ["all"], version = "^0.12.0"}
rich = "^13.0.0"
# Basic TTS (already included)
gTTS = "^2.4.0"
pyttsx3 = "^2.90"
# Text processing
nltk = "^3.8"
# Async support
aiofiles = "^23.0.0"
# Configuration
pydantic = "^2.0.0"
pydantic-settings = "^2.0.0"
# Optional TTS engines (install with poetry install -E xtts)
coqui-tts = {version = "^0.22.0", optional = true}
bark = {version = "^0.1.0", optional = true}
openvoice = {version = "^0.1.4", optional = true}
tortoise-tts = {version = "^2.0.0", optional = true}

[tool.poetry.extras]
xtts = ["coqui-tts"]
bark = ["bark"]
openvoice = ["openvoice"]
tortoise = ["tortoise-tts"]
all-tts = ["coqui-tts", "bark", "openvoice", "tortoise-tts"]

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.23.0"
ruff = "^0.3.0"
mypy = "^1.9.0"
black = "^24.0.0"
isort = "^5.13.0"
pre-commit = "^3.6.0"

[tool.poetry.scripts]
ebook2audio = "ebook2audio.cli:app"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 100
target-version = "py310"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-third-party = ["coqui_tts", "bark", "openvoice", "tortoise"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-ra -q --strict-markers --cov=ebook2audio --cov-report=term-missing"

[tool.coverage.run]
branch = true
source = ["src/ebook2audio"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.isort]
profile = "black"
line_length = 100
